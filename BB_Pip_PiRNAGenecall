#!/bin/bash

##----INTRO-----------##
# Name=BB_Pip_piRNAcall
# Date=Nov15 ,2016
# Update=Nov15, 2016
# Update information:
# First edit

########################
# Purpose
# This pipeline can define pachytene piRNA gene via small-RNA-seq and a comprehensive germline transcriptome

#######--Arguments--#######
help_info(){
	echo -e "\033[32m-------------------------------\033[0m"
	echo "usage:"
	echo "bash BB_Pip_PiRNAGenecall <option>* [-q srna.fq] [-g genome] [-T transcriptome.gtf] [-G reference.gtf]"
	echo -e "\033[32mBB_Pip_piRNAcall can generally call piRNA gene for mammals and calculate piRNA abundance in the clusters\033[0m"
	echo ""
	echo "Optional arguments:"
	echo "-o output directory. --default: temporary directory"
	echo "-p prefix for output file. --default: BB"
	echo "-w window size for piRNA gene extending. --default: 5000"
	echo "-c CPU number used for bowtie mapping. --default:1"
	echo "-d distance for distal piRNA gene merging. --default:50000"
	echo "-R RPM cutoff for piRNA gene filtering. --default:50"
	echo "-S sequence complexity cutoff for piRNA gene filtering. --default:100"
	echo "-M mismatch used for genome mapping. --default:1"
	echo "-E do not try extend piRNA gene for detail search"
	echo ""
	echo -e "\033[31m Caution: \033[0m"
	echo "The program only can deal with single-end ff-firststrand library. If not, please modify the program"
	echo "Program needed: BB_GetBinFromGenome.py bowtie fastq_to_insert insertBed_to_bed2 samtools bedtools."
	echo "Make sure all the program is in /home/User/bin"
	echo "The pipeline also need index files builded already"
	echo -e "\033[32m-------------------------------\033[0m"
}

if [ $# -lt 2 ];then
	help_info
	exit 1
fi

#############################
# chmod of programs #
#############################
chmod 755 ~/bin/*

#############################
# ARGS reading and checking #
#############################
OUTPATH=./
PREFIX=BB
WINDOW=2000
CPU=1
DISTAL=50000
RPMCUT=50
SEQCUT=100
MISMATCH=1
INDEXPATH=/data/tongji2/InputForRunBT/Index
CHROMPATH=/data/tongji2/InputForRunBT/ChromSize
EXTEND=Y

while getopts "hvEq:T:c:o:g:p:w:s:d:R:S:M:G:" OPTION; do
	case $OPTION in
		h)	help_info && exit 0 ;;
		T)  TRANSGTF=${OPTARG};;
		q)	INPUT_FASTQ=${OPTARG};;
		o)	OUTPATH=${OPTARG};;
		c)	CPU=${OPTARG};;
		v)	echo "BB_Pip_piRNAcall VERSION: Beta 1.0" && exit 0 ;;
		g)	GENOME=${OPTARG};;
		p)	PREFIX=${OPTARG};;
		w)  WINDOW=${OPTARG};;
		d)  DISTAL=${OPTARG};;
		R)  RPMCUT=${OPTARG};;
		S)  SEQCUT=${OPTARG};;
		M)  MISMATCH=${OPTARG};;
		G)  GTF=${OPTARG};;
		E)  EXTEND=N;;
		*)	usage && exit 1 ;;
	esac
done

#############################
# process #
#############################
DATE=`date --date="-24 hour"`
echo -e "\033[32mmake directory\t"$DATE"\033[0m"
if [ -d ${OUTPATH} ];then
	echo "Path Exists"
else
	mkdir ${OUTPATH}
fi
cd ${OUTPATH}
mkdir log_file
mkdir ncRNA_bed
mkdir insert_reads
mkdir map_info
mkdir figures

###mapping
#map to rRNA
DATE=`date --date="-24 hour"`
echo -e "\033[31mcreate insert format file for saving space\t"$DATE"\033[0m"
fastq_to_insert ${INPUT_FASTQ} insert_reads/${PREFIX}.insert

DATE=`date --date="-24 hour"`
echo -e "\033[31mmap to rRNA\t"$DATE"\033[0m"
bowtie -r -v ${MISMATCH} -a --best --strata -S -p ${CPU} ${INDEXPATH}/${GENOME}_bowtie_index/rRNA \
insert_reads/${PREFIX}.insert --un ${PREFIX}_rRNA.insert --al insert_reads/${PREFIX}.rRNA.insert > /dev/null 2> log_file/bowtie_rRNA.log

#map to miRNA hairpin
DATE=`date --date="-24 hour"`
echo -e "\033[33mmap to hairpin\t"$DATE"\033[0m"
bowtie -r -v ${MISMATCH} -m 1 -S --best --strata -p ${CPU} ${INDEXPATH}/${GENOME}_bowtie_index/hairpin \
${PREFIX}_rRNA.insert --un ${PREFIX}_rRNA_miRNA.insert --al insert_reads/${PREFIX}.hairpin.insert > ${PREFIX}.hairpin.sam 2> log_file/bowtie_hairpin.log

samtools view -uS -F0x4 ${PREFIX}.hairpin.sam 2>/dev/null | bedtools bamtobed -i - > ${PREFIX}.hairpin.insert.bed && insertBed_to_bed2 ${PREFIX}_rRNA.insert ${PREFIX}.hairpin.insert.bed > ${PREFIX}.hairpin.bed2 && \
rm -rf ${PREFIX}.hairpin.sam ${PREFIX}.hairpin.insert.bed

#map to other ncRNA like snRNA,snoRNA,tRNA,processed_transcript......
DATE=`date --date="-24 hour"`
echo -e "\033[32mmap to ncRNA\t"$DATE"\033[0m"
bowtie -r -v ${MISMATCH} -m 1 -S --best --strata -p ${CPU} ${INDEXPATH}/${GENOME}_bowtie_index/ncRNA \
${PREFIX}_rRNA_miRNA.insert --un ${PREFIX}_rRNA_miRNA_ncRNA.insert --al insert_reads/${PREFIX}.ncRNA.insert > /dev/null 2> log_file/bowtie_ncRNA.log

#length filtering to 24-32bp and nucleotide filtering to 1T
DATE=`date --date="-24 hour"`
echo -e "\033[31mfilter length and nucleotide\t"$DATE"\033[0m"
awk '{FS=OFS="\t"} {if(length($1)>23 && length($1)<33 && $1~/^T/){print $0}}' ${PREFIX}_rRNA_miRNA_ncRNA.insert > insert_reads/${PREFIX}.pilikeRNA.insert
awk '{FS=OFS="\t"} {if(length($1)>23 && length($1)<33 && $1~/^[ACG]/){print $0}}' ${PREFIX}_rRNA_miRNA_ncRNA.insert > insert_reads/${PREFIX}.pilikeRNA.ACG.insert
awk '{FS=OFS="\t"} {if(length($1)<24 || length($1)>32){print $0}}' ${PREFIX}_rRNA_miRNA_ncRNA.insert > insert_reads/${PREFIX}.unknown.insert

#map to genome
DATE=`date --date="-24 hour"`
echo -e "\033[33mmap to genome\t"$DATE"\033[0m"
bowtie -r -m 1 -v ${MISMATCH} -S -p ${CPU} ${INDEXPATH}/${GENOME}_bowtie_index/genome insert_reads/${PREFIX}.pilikeRNA.insert > ${PREFIX}.pilikeRNA.uniq.sam 2> log_file/bowtie_genome_1U.log

samtools view -uS -F0x4 ${PREFIX}.pilikeRNA.uniq.sam 2>/dev/null | bedtools bamtobed -i - > ${PREFIX}.pilikeRNA.uniq.insert.bed && insertBed_to_bed2 insert_reads/${PREFIX}.pilikeRNA.insert ${PREFIX}.pilikeRNA.uniq.insert.bed > ${PREFIX}.pilikeRNA.uniq.bed2
rm -rf ${PREFIX}.pilikeRNA.uniq.sam ${PREFIX}.pilikeRNA.uniq.insert.bed 
rm ${PREFIX}_rRNA.insert ${PREFIX}_rRNA_miRNA.insert ${PREFIX}_rRNA_miRNA_ncRNA.insert

bowtie -r -m 1 -v ${MISMATCH} -S -p ${CPU} ${INDEXPATH}/${GENOME}_bowtie_index/genome insert_reads/${PREFIX}.pilikeRNA.ACG.insert > ${PREFIX}.pilikeRNA.ACG.uniq.sam 2> log_file/bowtie_genome_N1U.log

samtools view -uS -F0x4 ${PREFIX}.pilikeRNA.ACG.uniq.sam 2>/dev/null | bedtools bamtobed -i - > ${PREFIX}.pilikeRNA.ACG.uniq.insert.bed && insertBed_to_bed2 insert_reads/${PREFIX}.pilikeRNA.ACG.insert ${PREFIX}.pilikeRNA.ACG.uniq.insert.bed > ${PREFIX}.pilikeRNA.ACG.uniq.bed2
rm -rf ${PREFIX}.pilikeRNA.ACG.uniq.sam ${PREFIX}.pilikeRNA.ACG.uniq.insert.bed 
#remove ncRNA reads from ensembl gtf file
DATE=`date --date="-24 hour"`
echo -e "\033[31mremove ncRNA reads\t"$DATE"\033[0m"
#snoRNA scaRNA snRNA miRNA lincRNA rRNA Mt_tRNA Mt_rRNA
sort -k1,1 -k2,2n ${PREFIX}.pilikeRNA.uniq.bed2 > t.bed2 && mv t.bed2 ${PREFIX}.pilikeRNA.uniq.bed2
sort -k1,1 -k2,2n ${PREFIX}.pilikeRNA.ACG.uniq.bed2 > t.bed2 && mv t.bed2 ${PREFIX}.pilikeRNA.ACG.uniq.bed2
grep "gene_biotype \"snoRNA\"" ${GTF} > t.gtf && NL=(`wc -l t.gtf`)
if [ $NL -gt 0 ];then
	BB_GtfToExonForEachGene.py t.gtf ncRNA_bed/snoRNA.bed name && cat ncRNA_bed/snoRNA.bed >> temp.bed
fi
grep "gene_biotype \"scaRNA\"" ${GTF} > t.gtf && NL=(`wc -l t.gtf`)
if [ $NL -gt 0 ];then
	BB_GtfToExonForEachGene.py t.gtf ncRNA_bed/scaRNA.bed name && cat ncRNA_bed/scaRNA.bed >> temp.bed
fi
grep "gene_biotype \"snRNA\"" ${GTF} > t.gtf && NL=(`wc -l t.gtf`)
if [ $NL -gt 0 ];then
	BB_GtfToExonForEachGene.py t.gtf ncRNA_bed/snRNA.bed name && cat ncRNA_bed/snRNA.bed >> temp.bed
fi
grep "gene_biotype \"miRNA\"" ${GTF} > t.gtf && NL=(`wc -l t.gtf`)
if [ $NL -gt 0 ];then
	BB_GtfToExonForEachGene.py t.gtf ncRNA_bed/miRNA.bed name && cat ncRNA_bed/miRNA.bed >> temp.bed
fi
grep "gene_biotype \"lincRNA\"" ${GTF} > t.gtf && NL=(`wc -l t.gtf`)
if [ $NL -gt 0 ];then
	BB_GtfToExonForEachGene.py t.gtf ncRNA_bed/lincRNA.bed name && cat ncRNA_bed/lincRNA.bed >> temp.bed
fi
grep "gene_biotype \"rRNA\"" ${GTF} > t.gtf && NL=(`wc -l t.gtf`)
if [ $NL -gt 0 ];then
	BB_GtfToExonForEachGene.py t.gtf ncRNA_bed/rRNA.bed name && cat ncRNA_bed/rRNA.bed >> temp.bed
fi
grep "gene_biotype \"Mt_tRNA\"" ${GTF} > t.gtf && NL=(`wc -l t.gtf`)
if [ $NL -gt 0 ];then
	BB_GtfToExonForEachGene.py t.gtf ncRNA_bed/Mt_tRNA.bed name && cat ncRNA_bed/Mt_tRNA.bed >> temp.bed
fi
grep "gene_biotype \"Mt_rRNA\"" ${GTF} > t.gtf && NL=(`wc -l t.gtf`)
if [ $NL -gt 0 ];then
	BB_GtfToExonForEachGene.py t.gtf ncRNA_bed/Mt_rRNA.bed name && cat ncRNA_bed/Mt_rRNA.bed >> temp.bed
fi
bedtools intersect -v -s -f 0.5 -wa -a ${PREFIX}.pilikeRNA.uniq.bed2 -b temp.bed > t.bed2 && mv t.bed2 ${PREFIX}.pilikeRNA.uniq.bed2
bedtools intersect -v -s -f 0.5 -wa -a ${PREFIX}.pilikeRNA.ACG.uniq.bed2 -b temp.bed > t.bed2 && mv t.bed2 ${PREFIX}.pilikeRNA.ACG.uniq.bed2
rm temp.bed t.gtf
awk '{FS=OFS="\t"} {for(i=0;i<$4;i++){print $1,$2,$3,1,1,$6}}' ${PREFIX}.pilikeRNA.uniq.bed2 > ${PREFIX}.pilikeRNA.uniq.bed
awk '{FS=OFS="\t"} {for(i=0;i<$4;i++){print $1,$2,$3,1,1,$6}}' ${PREFIX}.pilikeRNA.ACG.uniq.bed2 > ${PREFIX}.pilikeRNA.ACG.uniq.bed
PILIKE_UNIQREADS=(`wc -l ${PREFIX}.pilikeRNA.uniq.bed`)
PILIKE_FACTOR=`awk -v v1=$PILIKE_UNIQREADS 'BEGIN{print v1/1000000}'`
echo "piRNA like reads with 1U: "${PILIKE_UNIQREADS}

###calculate length distribution for small RNA
DATE=`date --date="-24 hour"`
echo -e "\033[33mcalculate small RNA information\t"$DATE"\033[0m"
BB_InsertLength.py insert_reads/${PREFIX}.insert map_info/${PREFIX}.lendis 15-40
BB_InsertLength.py insert_reads/${PREFIX}.rRNA.insert map_info/${PREFIX}.rRNA.lendis 15-40
BB_InsertLength.py insert_reads/${PREFIX}.hairpin.insert map_info/${PREFIX}.hairpin.lendis 15-40
BB_InsertLength.py insert_reads/${PREFIX}.ncRNA.insert map_info/${PREFIX}.ncRNA.lendis 15-40
BB_InsertLength.py insert_reads/${PREFIX}.pilikeRNA.insert map_info/${PREFIX}.pilikeRNA.lendis 15-40
BB_InsertLength.py insert_reads/${PREFIX}.pilikeRNA.ACG.insert map_info/${PREFIX}.pilikeRNA.ACG.lendis 15-40
BB_InsertNulDis.py insert_reads/${PREFIX}.insert map_info/${PREFIX}.nuldis
BB_InsertNulDis.py insert_reads/${PREFIX}.rRNA.insert map_info/${PREFIX}.rRNA.nuldis
BB_InsertNulDis.py insert_reads/${PREFIX}.hairpin.insert map_info/${PREFIX}.hairpin.nuldis
BB_InsertNulDis.py insert_reads/${PREFIX}.ncRNA.insert map_info/${PREFIX}.ncRNA.nuldis
BB_InsertNulDis.py insert_reads/${PREFIX}.pilikeRNA.insert map_info/${PREFIX}.pilikeRNA.nuldis
BB_InsertNulDis.py insert_reads/${PREFIX}.pilikeRNA.ACG.insert map_info/${PREFIX}.pilikeRNA.ACG.nuldis

###call piRNAcluster
#get exon bed6 from transcriptome gtf
DATE=`date --date="-24 hour"`
echo -e "\033[32mmake bed6 file for each exon\t"$DATE"\033[0m"
BB_GtfToExonForEachGene.py ${TRANSGTF} Trans.bed6 name
#sort the bed6 file for some large genome like monDom5
sort -k1,1 -k2,2n Trans.bed6 > t.bed6 && mv t.bed6 Trans.bed6

#calculate exon sequence signal
DATE=`date --date="-24 hour"`
echo -e "\033[31mcalculate sequence and reads signal in each window\t"$DATE"\033[0m"
bedtools intersect -c -s -sorted -F 0.5 -a Trans.bed6 -b ${PREFIX}.pilikeRNA.uniq.bed2 > Trans.seqsignal.bed
bedtools intersect -c -s -sorted -F 0.5 -a Trans.bed6 -b ${PREFIX}.pilikeRNA.ACG.uniq.bed2 | awk '{FS=OFS="\t"} {print $7}'> Trans.seqsignal.ACG.bed

#calculate exon reads signal
bedtools intersect -c -s -sorted -F 0.5 -a Trans.bed6 -b ${PREFIX}.pilikeRNA.uniq.bed | awk '{FS=OFS="\t"} {print $7}'> Trans.readsignal.bed
bedtools intersect -c -s -sorted -F 0.5 -a Trans.bed6 -b ${PREFIX}.pilikeRNA.ACG.uniq.bed | awk '{FS=OFS="\t"} {print $7}'> Trans.readsignal.ACG.bed

#merge sequence signal and reads signal
DATE=`date --date="-24 hour"`
echo -e "\033[33mmerge signal\t"$DATE"\033[0m"
paste Trans.seqsignal.bed Trans.readsignal.bed Trans.seqsignal.ACG.bed Trans.readsignal.ACG.bed > Trans.signal.bed
rm Trans.readsignal.bed Trans.seqsignal.bed Trans.seqsignal.ACG.bed Trans.readsignal.ACG.bed
rm Trans.bed6

#filter genes with signal and merge distal genes
DATE=`date --date="-24 hour"`
echo -e "\033[32mfilter transcript to find potential piRNA gene\t"$DATE"\033[0m"
awk -v v1=$PILIKE_FACTOR '{FS=OFS="\t"} {print $1,$2,$3,$4,$5,$6,$7,$8/v1,$9,$10/v1}' Trans.signal.bed > Trans.signal.rpm.bed
rm Trans.signal.bed
sort -k4,4 Trans.signal.rpm.bed > t.bed && mv t.bed Trans.signal.rpm.bed
grep "gene_biotype \"protein_coding\"" ${GTF} | awk '{FS=OFS="\t"} {if($3=="gene"){print $1,$4,$5,$9,0,$7}}' > Protein.bed
BB_Pip_PiRNAGenecall_filter_bed6.py Trans.signal.rpm.bed ${PREFIX}.piRNA.gene.gtf ${SEQCUT} ${RPMCUT} ${GENOME} ${DISTAL}
BB_Pip_PiRNAGenecall_GtfToExon.py ${PREFIX}.piRNA.gene.gtf ${PREFIX}.piRNA.gene.bed id

#try intergenic piRNA gene extension
if [ ${EXTEND} = "Y" ];then
	BB_GetBinFromGenome.py ${CHROMPATH}/${GENOME}.chrom.size ${GENOME}_W${WINDOW}.bed ${WINDOW} ${WINDOW}
	sort -k1,1 -k2,2n ${GENOME}_W${WINDOW}.bed > t.bed && mv t.bed ${GENOME}_W${WINDOW}.bed
	bedtools intersect -s -c -sorted -F 0.5 -a ${GENOME}_W${WINDOW}.bed -b ${PREFIX}.pilikeRNA.uniq.bed > ${GENOME}_W${WINDOW}.plus.rpm
	bedtools intersect -s -c -sorted -F 0.5 -a ${GENOME}_W${WINDOW}.bed -b ${PREFIX}.pilikeRNA.uniq.bed2 | awk '{print $7}' > ${GENOME}_W${WINDOW}.plus.comp
	bedtools intersect -S -c -sorted -F 0.5 -a ${GENOME}_W${WINDOW}.bed -b ${PREFIX}.pilikeRNA.uniq.bed | awk '{print $7}' > ${GENOME}_W${WINDOW}.minus.rpm
	bedtools intersect -S -c -sorted -F 0.5 -a ${GENOME}_W${WINDOW}.bed -b ${PREFIX}.pilikeRNA.uniq.bed2 | awk '{print $7}' > ${GENOME}_W${WINDOW}.minus.comp
	paste ${GENOME}_W${WINDOW}.plus.rpm ${GENOME}_W${WINDOW}.plus.comp ${GENOME}_W${WINDOW}.minus.rpm ${GENOME}_W${WINDOW}.minus.comp > ${GENOME}_W${WINDOW}.signal
	BB_Pip_PiRNAGenecall_ExtendpiG.py ${PREFIX}.piRNA.gene.bed ${WINDOW} ${PILIKE_FACTOR} ${GENOME} ${PREFIX} ${GENOME}_W${WINDOW}.signal
	rm ${GENOME}_W${WINDOW}*
	# mv ${PREFIX}.piRNA.gene.final.bed ${PREFIX}.piRNA.gene.bed
	# mv ${PREFIX}.piRNA.gene.final.gtf ${PREFIX}.piRNA.gene.gtf
fi

#make filgures
cat << EOF > plot_dis.R
#!/usr/bin/env Rscript
###library packages###

###read data###
Args <- commandArgs()
lendis_all=Args[6]
lendis_rRNA=Args[7]
lendis_miRNA=Args[8]
lendis_ncRNA=Args[9]
nuldis_all=Args[10]
nuldis_rRNA=Args[11]
nuldis_miRNA=Args[12]
nuldis_ncRNA=Args[13]
b1=as.numeric(Args[14])
b2=as.numeric(Args[15])
b3=as.numeric(Args[16])
b4=as.numeric(Args[17])
b5=as.numeric(Args[18])
b6=as.numeric(Args[19])
b7=as.numeric(Args[20])
b8=as.numeric(Args[21])
lendis_piU=Args[22]
lendis_piNU=Args[23]
nuldis_piU=Args[24]
nuldis_piNU=Args[25]
bi=c(b1,b2,b3,b4,b5,b6,b7,b8)

la=read.table(lendis_all,header=FALSE,row.names=1)
lr=read.table(lendis_rRNA,header=FALSE,row.names=1)
lm=read.table(lendis_miRNA,header=FALSE,row.names=1)
ln=read.table(lendis_ncRNA,header=FALSE,row.names=1)
na=read.table(nuldis_all,header=FALSE,row.names=1)
nr=read.table(nuldis_rRNA,header=FALSE,row.names=1)
nm=read.table(nuldis_miRNA,header=FALSE,row.names=1)
nn=read.table(nuldis_ncRNA,header=FALSE,row.names=1)
lpu=read.table(lendis_piU,header=FALSE,row.names=1)
lpnu=read.table(lendis_piNU,header=FALSE,row.names=1)
npu=read.table(nuldis_piU,header=FALSE,row.names=1)
npnu=read.table(nuldis_piNU,header=FALSE,row.names=1)

###plot###
pdf(paste("figures/",PREFIX,"lendis.pdf",sep=""),height=12.5,width=4)
par(mfrow=c(5,1),mar=c(3,4,4,2))
barplot(la[,1],names.arg=15:39,col="black",border="white",space=0,main="all reads",ylab="read counts")
barplot(lr[,1],names.arg=15:39,col="black",border="white",space=0,main="rRNA reads",ylab="read counts")
barplot(lm[,1],names.arg=15:39,col="black",border="white",space=0,main="hairpin reads",ylab="read counts")
barplot(ln[,1],names.arg=15:39,col="black",border="white",space=0,main="ncRNA reads",ylab="read counts")
barplot(lpu[,1]+lpnu[,1],names.arg=15:39,col="black",border="white",space=0,main="pilikeRNA reads",ylab="read counts")
barplot(lpnu[,1],col="#99000d",border="white",space=0,add=T,xaxt="n",yaxt="n")
legend("topright",pch=15,pt.cex=2,col=c("black","#99000d"),legend=c("1U","1A/C/G"),bty="n")
dev.off()
par(mfrow=c(1,1))
pdf(paste("figures/",PREFIX,"nuldis.pdf",sep=""),height=12.5,width=7)
laymat=matrix(1,5,7)
laymat[1,1:6]=2
laymat[2,1:6]=3
laymat[3,1:6]=4
laymat[4,1:6]=5
laymat[5,1:6]=6
layout(laymat)
par(mar=c(0,0,0,0))
plot.new()
legend("left",col=c("black","#084594","#99000d","#005824","#4a1486"),pch=15,pt.cex=2.5,legend=c("U","C","G","A","N"),cex=1.5,bty="n")
par(mar=c(3,4,4,2))
n1=apply(na,2,function(x){x/sum(x)*100})
n2=apply(nr,2,function(x){x/sum(x)*100})
n3=apply(nm,2,function(x){x/sum(x)*100})
n4=apply(nn,2,function(x){x/sum(x)*100})
np=npu+npnu
n5=apply(np,2,function(x){x/sum(x)*100})
barplot(n1,names.arg=1:35,col=c("black","#084594","#99000d","#005824","#4a1486"),border="white",space=0,main="all reads",ylab="read counts")
barplot(n2,names.arg=1:35,col=c("black","#084594","#99000d","#005824","#4a1486"),border="white",space=0,main="rRNA reads",ylab="read counts")
barplot(n3,names.arg=1:35,col=c("black","#084594","#99000d","#005824","#4a1486"),border="white",space=0,main="miRNA reads",ylab="read counts")
barplot(n4,names.arg=1:35,col=c("black","#084594","#99000d","#005824","#4a1486"),border="white",space=0,main="ncRNA reads",ylab="read counts")
barplot(n5,names.arg=1:35,col=c("black","#084594","#99000d","#005824","#4a1486"),border="white",space=0,main="pilikeRNA reads",ylab="read counts")
dev.off()
pdf(paste("figures/",PREFIX,"basicinfo.pdf",sep=""),height=8,width=10)
laymat=matrix(0,2,4)
laymat[1,1:2]=1
laymat[1,3:4]=2
laymat[2,2:3]=3
layout(laymat)
par(mar=c(2,4,4,1),cex=0.8)
barplot(log10(bi[1:4]+1),space=2,col=c("#084594","#99000d","#005824","#4a1486"),border="white",ylim=c(0,max(log10(bi[1:4]+1))+2),main="Number of Genes",ylab="log10Number",xlim=c(2,14))
lb=c(paste("n=",prettyNum(bi[1],big.mark=","),seq=""),
	paste("n=",prettyNum(bi[2],big.mark=","),seq=""),
	paste("n=",prettyNum(bi[3],big.mark=","),seq=""),
	paste("n=",prettyNum(bi[4],big.mark=","),seq=""))
text(c(2.5,5.5,8.5,11.5),log10(bi[1:4]+1)+0.1,label=lb,srt=45,cex=0.8,pos=4,offset=-0.25)
barplot(log10(bi[5:8]+1),space=2,col=c("#084594","#99000d","#005824","#4a1486"),border="white",ylim=c(0,max(log10(bi[5:8]+1))+2),main="Exon Length of Genes",ylab="log10Length",xlim=c(2,14))
lb=c(paste("l=",prettyNum(bi[5],big.mark=","),seq=""),
	paste("l=",prettyNum(bi[6],big.mark=","),seq=""),
	paste("l=",prettyNum(bi[7],big.mark=","),seq=""),
	paste("l=",prettyNum(bi[8],big.mark=","),seq=""))
text(c(2.5,5.5,8.5,11.5),log10(bi[5:8]+1)+0.1,label=lb,srt=45,cex=0.8,pos=4,offset=-0.25)
legend("topright",col=c("#084594","#99000d","#005824","#4a1486"),pch=15,pt.cex=2,legend=c("protein_coding","lincRNA","piRNA unmerged","piRNA merged/extend"),cex=1,bty="n")
barplot(log10(bi[5:8]/(bi[1:4]+0.001)+1),space=2,col=c("#084594","#99000d","#005824","#4a1486"),border="white",ylim=c(0,max(log10(bi[5:8]+1))+2),main="Average Exon Length of Genes",ylab="log10Length",xlim=c(2,14))
lb=c(paste("l=",prettyNum(bi[5]/(bi[1]+0.001),big.mark=","),seq=""),
	paste("l=",prettyNum(bi[6]/(bi[2]+0.001),big.mark=","),seq=""),
	paste("l=",prettyNum(bi[7]/(bi[3]+0.001),big.mark=","),seq=""),
	paste("l=",prettyNum(bi[8]/(bi[4]+0.001),big.mark=","),seq=""))
text(c(2.5,5.5,8.5,11.5),log10(bi[5:8]/(bi[1:4]+0.001)+1)+0.1,label=lb,srt=45,cex=0.8,pos=4,offset=-0.25)
dev.off()
EOF

DATE=`date --date="-24 hour"`
echo -e "\033[32mcalculate protein_coding gene number\t"$DATE"\033[0m"
grep "gene_biotype \"protein_coding\"" ${GTF} > Protein.gtf
DATE=`date --date="-24 hour"`
echo -e "\033[31mcalculate lincRNA gene number\t"$DATE"\033[0m"
grep "gene_biotype \"lincRNA\"" ${GTF} > LincRNA.gtf
PRONUM=(`wc -l Protein.bed`)
LINCNUM=(`awk '{FS=OFS="\t"} {if($3=="gene"){print $1}}' LincRNA.gtf | wc -l `)
DATE=`date --date="-24 hour"`
echo -e "\033[33mcalculate protein_coding gene length\t"$DATE"\033[0m"
BB_GtfToExonForEachGene.py Protein.gtf Protein.exon.bed name
DATE=`date --date="-24 hour"`
echo -e "\033[32mcalculate lincRNA gene length\t"$DATE"\033[0m"
BB_GtfToExonForEachGene.py LincRNA.gtf LincRNA.exon.bed name
PROLEN=(`awk 'BEGIN{sum=0} {sum=sum+($3-$2+1)} END{print sum}' Protein.exon.bed`)
LINCLEN=(`awk 'BEGIN{sum=0} {sum=sum+($3-$2+1)} END{print sum}' LincRNA.exon.bed`)
DATE=`date --date="-24 hour"`
echo -e "\033[31mcalculate piRNA gene number and length\t"$DATE"\033[0m"
PINUM1=(`cut -f 4 temp_unmerged_exon.bed | sort -u | wc -l`)
PINUM2=(`cut -f 4 ${PREFIX}.piRNA.gene.bed | sort -u | wc -l`)
PILEN1=(`awk 'BEGIN{sum=0} {sum=sum+($3-$2+1)} END{print sum}' temp_unmerged_exon.bed`)
PILEN2=(`awk 'BEGIN{sum=0} {sum=sum+($3-$2+1)} END{print sum}' ${PREFIX}.piRNA.gene.bed`)
DATE=`date --date="-24 hour"`
echo -e "\033[33mmake figures for basic information\t"$DATE"\033[0m"
Rscript plot_dis.R map_info/${PREFIX}.lendis map_info/${PREFIX}.rRNA.lendis map_info/${PREFIX}.hairpin.lendis map_info/${PREFIX}.ncRNA.lendis map_info/${PREFIX}.nuldis map_info/${PREFIX}.rRNA.nuldis map_info/${PREFIX}.hairpin.nuldis map_info/${PREFIX}.ncRNA.nuldis ${PRONUM} ${LINCNUM} ${PINUM1} ${PINUM2} ${PROLEN} ${LINCLEN} ${PILEN1} ${PILEN2} map_info/${PREFIX}.pilikeRNA.lendis map_info/${PREFIX}.pilikeRNA.ACG.lendis map_info/${PREFIX}.pilikeRNA.nuldis map_info/${PREFIX}.pilikeRNA.ACG.nuldis ${PREFIX}

rm temp*
rm Protein.bed Protein.gtf LincRNA.gtf LincRNA.exon.bed Protein.exon.bed

###make bigWig file for genome browser
DATE=`date --date="-24 hour"`
echo -e "\033[33mmake bigWig file\t"$DATE"\033[0m"
bedtools genomecov -strand + -bg -i ${PREFIX}.pilikeRNA.uniq.bed -g ${CHROMPATH}/${GENOME}.chrom.size > temp_Waston.bdg
bedtools genomecov -strand - -bg -i ${PREFIX}.pilikeRNA.uniq.bed -g ${CHROMPATH}/${GENOME}.chrom.size > temp_Crick.bdg
awk -v v1=$PILIKE_FACTOR '{FS=OFS="\t"} {print $1,$2,$3,$4/v1}' temp_Waston.bdg > temp_Waston_nor.bdg
awk -v v1=$PILIKE_FACTOR '{FS=OFS="\t"} {print $1,$2,$3,$4/v1}' temp_Crick.bdg > temp_Crick_nor.bdg
bedGraphToBigWig temp_Waston_nor.bdg ${CHROMPATH}/${GENOME}.chrom.size ${PREFIX}.pilikeRNA.uniq.Waston.bw
bedGraphToBigWig temp_Crick_nor.bdg ${CHROMPATH}/${GENOME}.chrom.size ${PREFIX}.pilikeRNA.uniq.Crick.bw

rm temp*

DATE=`date --date="-24 hour"`
echo -e "\033[32mcongraulations, done!\t"$DATE"\033[0m"










